globalkey=value
blabla12=444
colon:like a boss
quoted="string"

[   section   	]
k=v
key = 1                        
value	=	2                        

; comment
# comment

aftercomment=lololo

key with spaces = banana

[section with spaces]                        

aa=bla   #this is not a comment
aaa=bbb;this neither#lol        

fu="this quoted string has a comment after it" ; lol comment       
fu='this one also' # comment                   

key.long._foo.compositeěščřžýááí=123
foo="double-quoted"
bar='single-quoted'
decimal=255
hex=0xFF
dec_minus=-444

	indented 	=	ok

value = spaces
argg      =                             "lol"        

spaces_in_string = "  <2 <1,3>   "    

[error tests] ;comment after section?                    

start of error tests=blabla

=this is bad
whatever
goodkey=goodvalue
[lol
ahoj
]stupid stupid
*-+

// c style comment?? NO!

[DEMO]

; this is a comment
# another comment

; Keys before any section are in "global scope"
;  and their section is "" - empty string

; The parser does NOT detect duplicate keys.
;  Both colons : and equals = can be used
foo=bar
foo:bar

   ; Surrounding whitespace is ignored, e.g.
   this     =    is okay
   ; equals to
   this=is okay

   indenting=is fine

   ; keys can contain anything except : and =
   for.instance/this+is perfectly = okay

; utf8 can be safely used as part of keys or values
žížala = růžová

; Comments can't be on the same line as value
foo=bar ; this is not a comment
baz=ook # neither is this

; BUT: If the value is quoted, comments can be added after it:
key="value" # This is a comment!!
   ; single quotes also work:
   key='value'

   ; Quotes can be used to...
   add = "  whitespace before and after   "

   ; Escape sequences are supported:
   hello="newline \n quote \" backslash \\ apos \' ..."

; This is a section
[section1]

; Surrounding whitespace is ignored
[    this is a section   ] ; and comments discarded

; Sections cannot be nested - but you can use eg.
[group.section]
